/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.unicauca.clientproducthttpclient.presentation;

import com.unicauca.clientproducthttpclient.controllers.CategoryController;
import com.unicauca.clientproducthttpclient.domain.entities.Category;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Juan
 */
public class GUICategoryList extends javax.swing.JDialog {
    private CategoryController categoryController;

    /**
     * Creates new form GUICategoryList
     */
    public GUICategoryList(java.awt.Frame parent, boolean modal,CategoryController categoryController) {
        super(parent,modal);
        this.categoryController=categoryController;
        initComponents();
        InitializeTable();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngBuscar = new javax.swing.ButtonGroup();
        pnlNorte = new javax.swing.JPanel();
        lblBuscar = new javax.swing.JLabel();
        rdbId = new javax.swing.JRadioButton();
        rdbNombre = new javax.swing.JRadioButton();
        txtBuscar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnBuscarTodos = new javax.swing.JButton();
        pnlCenter = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategory = new javax.swing.JTable();
        pnlSur = new javax.swing.JPanel();
        btnCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Listar categorias");

        pnlNorte.setMinimumSize(new java.awt.Dimension(427, 33));
        pnlNorte.setPreferredSize(new java.awt.Dimension(425, 42));

        lblBuscar.setText("Buscar por:");
        pnlNorte.add(lblBuscar);

        btngBuscar.add(rdbId);
        rdbId.setText("Id");
        rdbId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbIdActionPerformed(evt);
            }
        });
        pnlNorte.add(rdbId);

        btngBuscar.add(rdbNombre);
        rdbNombre.setText("Nombre");
        rdbNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbNombreActionPerformed(evt);
            }
        });
        pnlNorte.add(rdbNombre);

        txtBuscar.setPreferredSize(new java.awt.Dimension(62, 32));
        pnlNorte.add(txtBuscar);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        pnlNorte.add(btnBuscar);

        btnBuscarTodos.setText("Buscar todos");
        btnBuscarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarTodosActionPerformed(evt);
            }
        });
        pnlNorte.add(btnBuscarTodos);

        getContentPane().add(pnlNorte, java.awt.BorderLayout.PAGE_START);

        pnlCenter.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        pnlCenter.setMinimumSize(new java.awt.Dimension(16, 20));
        pnlCenter.setPreferredSize(new java.awt.Dimension(452, 402));
        pnlCenter.setLayout(new java.awt.BorderLayout());

        tblCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCategory);

        pnlCenter.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlCenter, java.awt.BorderLayout.CENTER);

        pnlSur.setMinimumSize(new java.awt.Dimension(82, 33));
        pnlSur.setPreferredSize(new java.awt.Dimension(82, 33));

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        pnlSur.add(btnCerrar);

        getContentPane().add(pnlSur, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdbNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbNombreActionPerformed
        if (rdbNombre.isSelected()) {
            txtBuscar.setEnabled(true);
            txtBuscar.setText(""); // Limpiar el texto de búsqueda
            txtBuscar.requestFocus(); // Colocar el foco en la casilla de búsqueda
        } else {
            // Deshabilitar la casilla de búsqueda por nombre si no está seleccionada
            txtBuscar.setEnabled(false);
            txtBuscar.setText(""); // Limpiar el texto de búsqueda
        }
    }//GEN-LAST:event_rdbNombreActionPerformed

    private void rdbIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbIdActionPerformed
        // Habilitar la casilla de búsqueda por ID si está seleccionada
        if (rdbId.isSelected()) {
            txtBuscar.setEnabled(true);
            txtBuscar.setText(""); // Limpiar el texto de búsqueda
            txtBuscar.requestFocus(); // Colocar el foco en la casilla de búsqueda
        } else {
            // Deshabilitar la casilla de búsqueda por ID si no está seleccionada
            txtBuscar.setEnabled(false);
            txtBuscar.setText(""); // Limpiar el texto de búsqueda
        }
    }//GEN-LAST:event_rdbIdActionPerformed

    private void btnBuscarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarTodosActionPerformed
        loadData();
    }//GEN-LAST:event_btnBuscarTodosActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        // Verificar si se seleccionó la búsqueda por ID
        if (rdbId.isSelected()) {
            // Obtener el texto ingresado por el usuario en la casilla de búsqueda
            String searchText = txtBuscar.getText().trim();

            // Verificar si el campo de búsqueda no está vacío
            if (!searchText.isEmpty()) {
                try {
                    // Convertir el texto a un Long (ID)
                    Integer categoryId = Integer.parseInt(searchText);

                    // Realizar la búsqueda por ID
                    Category foundCategory = categoryController.findById(categoryId);
                    // Verificar si se encontró el producto
                    if (foundCategory.getCategoryId()!= 0) {
                        // Limpiar la tabla y agregar el producto encontrado
                        DefaultTableModel model = (DefaultTableModel) tblCategory.getModel();
                        model.setRowCount(0); // Limpiar la tabla
                        model.addRow(new Object[]{foundCategory.getCategoryId(), foundCategory.getName()});
                    } else {
                        // Mostrar un mensaje indicando que no se encontró el producto
                        JOptionPane.showMessageDialog(this, "No se encontró ninguna categoria con el ID especificado.", "Categoria no encontrada", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    // Mostrar un mensaje de error si el texto ingresado no es un número válido
                    JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID válido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Mostrar un mensaje indicando que el campo de búsqueda está vacío
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID para buscar.", "Campo vacío", JOptionPane.INFORMATION_MESSAGE);
            }
        } else if (rdbNombre.isSelected()) {
            String searchText = txtBuscar.getText().trim();
            if (!searchText.isEmpty()) {
                try {
                    Category foundCategory = categoryController.findByName(searchText);

                    if (foundCategory.getCategoryId()!= 0) {
                        DefaultTableModel model = (DefaultTableModel) tblCategory.getModel();
                        model.setRowCount(0); // Limpiar la tabla
                        model.addRow(new Object[]{foundCategory.getCategoryId(), foundCategory.getName()});
                    } else {
                        // Mostrar un mensaje indicando que no se encontró el producto
                        JOptionPane.showMessageDialog(this, "No se encontró ninguna categoría con el nombre especificado.", "Categoría no encontrada", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    // Mostrar un mensaje de error si el texto ingresado no es un número válido
                    JOptionPane.showMessageDialog(this, "Por favor, ingrese un nombre válido.", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } else {

                JOptionPane.showMessageDialog(this, "Por favor, ingrese un nombre para buscar .", "Campo vacio", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed


    private void InitializeTable() {
        tblCategory.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Id", "Nombre"
                }
        ));
    }
    private void loadData() {
        InitializeTable();
        List<Category> result = categoryController.findAll();
        this.InitializeTable();
        DefaultTableModel model = (DefaultTableModel) tblCategory.getModel();

        Object rowData[] = new Object[8];//No columnas
        for (int i = 0; i < result.size(); i++) {
            rowData[0] = result.get(i).getCategoryId();
            rowData[1] = result.get(i).getName();

            model.addRow(rowData);
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBuscarTodos;
    private javax.swing.JButton btnCerrar;
    private javax.swing.ButtonGroup btngBuscar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlNorte;
    private javax.swing.JPanel pnlSur;
    private javax.swing.JRadioButton rdbId;
    private javax.swing.JRadioButton rdbNombre;
    private javax.swing.JTable tblCategory;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
